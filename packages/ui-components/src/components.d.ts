/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Placement } from "@popperjs/core";
export namespace Components {
    interface OncFlightItineraryInfo {
        /**
          * Optional base URL for the Oncarbon API where the info is loaded from
         */
        "apiBaseUrl": string;
        /**
          * The flight itinerary's oncarbon id for which to show the info
         */
        "itineraryOncarbonId": string;
        /**
          * Optional RFC 5646 language tag in which the info is shown. Supported languages are english and finnish. If an unsupported language tag is given, english is used as a fallback.
         */
        "language"?: string;
        /**
          * Optional version tag to define which version of the info to show.
         */
        "version"?: string;
    }
    interface OncFlightItineraryInfoPopover {
        /**
          * Oncarbon API base URL where the info is loaded from
         */
        "apiBaseUrl"?: string;
        /**
          * Closes the popover
         */
        "close": () => Promise<void>;
        /**
          * Should the default behaviour to close the popover when user clicks outside it be disabled. If yes, the popover can only be closed either programmatically or by clicking the close icon.
         */
        "disableCloseOnOutsideClick"?: boolean;
        /**
          * Oncarbon ID for the flight itinerary whose info is to be shown
         */
        "itineraryOncarbonId": string;
        /**
          * Optional RFC 5646 language tag in which the info is shown. Supported languages are english and finnish. If an unsupported language tag is given, english is used as a fallback.
         */
        "language"?: string;
        /**
          * The offset lets you displace the popover element from its reference element. See https://popper.js.org/docs/v2/modifiers/offset/#options
          * @default [0, 10]
         */
        "offset"?: [number, number];
        /**
          * Opens the popover
         */
        "open": () => Promise<void>;
        /**
          * Describes the preferred placement of the popover. See https://popper.js.org/docs/v2/constructors/#placement
          * @default bottom
         */
        "placement"?: Placement;
        /**
          * Optional trigger element that opens the popup and in reference to which the popover is positioned. Can either be a 1. a DOM selector string, such as .trigger-button 2. a HTML element  If none is given, the popover is triggered and positioned by the first child of this component.
         */
        "trigger"?: string | HTMLElement;
        /**
          * Optional version tag to define which version of the info to show.
         */
        "version"?: string;
    }
}
declare global {
    interface HTMLOncFlightItineraryInfoElement extends Components.OncFlightItineraryInfo, HTMLStencilElement {
    }
    var HTMLOncFlightItineraryInfoElement: {
        prototype: HTMLOncFlightItineraryInfoElement;
        new (): HTMLOncFlightItineraryInfoElement;
    };
    interface HTMLOncFlightItineraryInfoPopoverElement extends Components.OncFlightItineraryInfoPopover, HTMLStencilElement {
    }
    var HTMLOncFlightItineraryInfoPopoverElement: {
        prototype: HTMLOncFlightItineraryInfoPopoverElement;
        new (): HTMLOncFlightItineraryInfoPopoverElement;
    };
    interface HTMLElementTagNameMap {
        "onc-flight-itinerary-info": HTMLOncFlightItineraryInfoElement;
        "onc-flight-itinerary-info-popover": HTMLOncFlightItineraryInfoPopoverElement;
    }
}
declare namespace LocalJSX {
    interface OncFlightItineraryInfo {
        /**
          * Optional base URL for the Oncarbon API where the info is loaded from
         */
        "apiBaseUrl"?: string;
        /**
          * The flight itinerary's oncarbon id for which to show the info
         */
        "itineraryOncarbonId"?: string;
        /**
          * Optional RFC 5646 language tag in which the info is shown. Supported languages are english and finnish. If an unsupported language tag is given, english is used as a fallback.
         */
        "language"?: string;
        /**
          * Event emitted when the close icon has been clicked
         */
        "onCloseClicked"?: (event: CustomEvent<void>) => void;
        /**
          * Event emitted when the flight itinerary info has been loaded
         */
        "onLoadingReady"?: (event: CustomEvent<void>) => void;
        /**
          * Optional version tag to define which version of the info to show.
         */
        "version"?: string;
    }
    interface OncFlightItineraryInfoPopover {
        /**
          * Oncarbon API base URL where the info is loaded from
         */
        "apiBaseUrl"?: string;
        /**
          * Should the default behaviour to close the popover when user clicks outside it be disabled. If yes, the popover can only be closed either programmatically or by clicking the close icon.
         */
        "disableCloseOnOutsideClick"?: boolean;
        /**
          * Oncarbon ID for the flight itinerary whose info is to be shown
         */
        "itineraryOncarbonId"?: string;
        /**
          * Optional RFC 5646 language tag in which the info is shown. Supported languages are english and finnish. If an unsupported language tag is given, english is used as a fallback.
         */
        "language"?: string;
        /**
          * The offset lets you displace the popover element from its reference element. See https://popper.js.org/docs/v2/modifiers/offset/#options
          * @default [0, 10]
         */
        "offset"?: [number, number];
        /**
          * Describes the preferred placement of the popover. See https://popper.js.org/docs/v2/constructors/#placement
          * @default bottom
         */
        "placement"?: Placement;
        /**
          * Optional trigger element that opens the popup and in reference to which the popover is positioned. Can either be a 1. a DOM selector string, such as .trigger-button 2. a HTML element  If none is given, the popover is triggered and positioned by the first child of this component.
         */
        "trigger"?: string | HTMLElement;
        /**
          * Optional version tag to define which version of the info to show.
         */
        "version"?: string;
    }
    interface IntrinsicElements {
        "onc-flight-itinerary-info": OncFlightItineraryInfo;
        "onc-flight-itinerary-info-popover": OncFlightItineraryInfoPopover;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "onc-flight-itinerary-info": LocalJSX.OncFlightItineraryInfo & JSXBase.HTMLAttributes<HTMLOncFlightItineraryInfoElement>;
            "onc-flight-itinerary-info-popover": LocalJSX.OncFlightItineraryInfoPopover & JSXBase.HTMLAttributes<HTMLOncFlightItineraryInfoPopoverElement>;
        }
    }
}
